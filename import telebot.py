import telebot
from telebot import types
import sqlite3
import os

TOKEN = '8038685111:AAELBHkkMfA5vzcz6zBq0TxNTT5fwlqu9H4'
bot = telebot.TeleBot(TOKEN)

DB_PATH = 'bot_database.db'

def init_db():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS users (
                        user_id INTEGER PRIMARY KEY,
                        username TEXT,
                        full_name TEXT
                      )''')
    cursor.execute('''CREATE TABLE IF NOT EXISTS images (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        user_id INTEGER,
                        file_path TEXT
                      )''')
    conn.commit()
    conn.close()

init_db()


def add_user(user_id, username, full_name):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('INSERT OR IGNORE INTO users (user_id, username, full_name) VALUES (?, ?, ?)',
                   (user_id, username, full_name))
    conn.commit()
    conn.close()


def save_image(user_id, file_path):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('INSERT INTO images (user_id, file_path) VALUES (?, ?)', (user_id, file_path))
    conn.commit()
    conn.close()


@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.chat.id
    username = message.chat.username
    full_name = message.chat.first_name + ' ' + (message.chat.last_name or '')
    add_user(user_id, username, full_name)
    
    bot.send_message(
        user_id,
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.chat.first_name}! –Ø –≤–∞—à –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç AITU.\n\n"
        "üéì –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.",
        reply_markup=main_menu_buttons()
    )


@bot.message_handler(commands=['help'])
def help_command(message):
    bot.send_message(
        message.chat.id,
        "üìã **–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:**\n"
        "/start ‚Äî –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É.\n"
        "/help ‚Äî –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.\n"
        "/info ‚Äî –û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞.\n\n"
        "üìå –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –ó–∞–≥—Ä—É–∂–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n"
        "‚Ä¢ –ò—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ –º–µ–Ω—é.\n"
        "‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —Å—Å—ã–ª–∫–∏ –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.",
        parse_mode="Markdown"
    )


@bot.message_handler(commands=['info'])
def info_command(message):
    bot.send_message(
        message.chat.id,
        "‚ÑπÔ∏è **–û –±–æ—Ç–µ:**\n"
        "–Ø —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–º–æ—â–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞–º AITU. –ú–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏, "
        "–∫–∞—Ä—Ç–µ –∫–∞–º–ø—É—Å–∞, –∞ —Ç–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞—à–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. üöÄ",
        parse_mode="Markdown"
    )


def main_menu_buttons():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_admission = types.KeyboardButton("üìö –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ")
    btn_map = types.KeyboardButton("üåé –ö–∞—Ä—Ç–∞ AITU")
    btn_consultant = types.KeyboardButton("üìû –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç")
    btn_gallery = types.KeyboardButton("üñºÔ∏è –ú–æ—è –≥–∞–ª–µ—Ä–µ—è")
    markup.add(btn_admission, btn_map)
    markup.add(btn_consultant, btn_gallery)
    return markup


@bot.message_handler(func=lambda message: message.text in ["üìö –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ", "üåé –ö–∞—Ä—Ç–∞ AITU", "üìû –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç", "üñºÔ∏è –ú–æ—è –≥–∞–ª–µ—Ä–µ—è"])
def handle_main_menu(message):
    if message.text == "üìö –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ":
        bot.send_message(
            message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å:",
            reply_markup=admission_buttons()
        )
    elif message.text == "üåé –ö–∞—Ä—Ç–∞ AITU":
        bot.send_message(
            message.chat.id,
            "üåç [–ö–∞—Ä—Ç–∞ –∫–∞–º–ø—É—Å–∞ AITU](https://yuujiso.github.io/aitumap/)",
            parse_mode="Markdown"
        )
    elif message.text == "üìû –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç":
        bot.send_message(
            message.chat.id,
            "üí¨ –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º: [–ü–µ—Ä–µ–π—Ç–∏ –≤ Telegram](https://t.me/dinishok)",
            parse_mode="Markdown"
        )
    elif message.text == "üñºÔ∏è –ú–æ—è –≥–∞–ª–µ—Ä–µ—è":
        show_gallery(message.chat.id)


# def admission_buttons():
#     markup = types.InlineKeyboardMarkup()
#     questions = [
#         ("–ö–∞–∫–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è?", "–ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª - 70.")
#     ]
#     for question, answer in questions:
#         markup.add(types.InlineKeyboardButton(question, callback_data=answer))
#     return markup

@bot.message_handler(func=lambda message: message.text == "üìö –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ")
def handle_admission(message):
    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å:",
        reply_markup=admission_buttons()
    )


def admission_buttons():
    markup = types.InlineKeyboardMarkup()
    questions = [
        ("–ö–∞–∫–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è?", "criteria"),
        ("–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –æ–±—É—á–µ–Ω–∏–µ?", "cost"),
        ("–°–∫–æ–ª—å–∫–æ –¥–ª–∏—Ç—Å—è –æ–±—É—á–µ–Ω–∏–µ?", "duration")
    ]
    for question, callback_data in questions:
        markup.add(types.InlineKeyboardButton(question, callback_data=callback_data))
    return markup


@bot.callback_query_handler(func=lambda call: call.data in ["criteria", "cost", "duration"])
def admission_callback(call):
    responses = {
        "criteria": "üìå **–ö—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è:**\n–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª - 70.\n–î–æ–∫—É–º–µ–Ω—Ç—ã:\n- –£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏\n- –ê—Ç—Ç–µ—Å—Ç–∞—Ç/–î–∏–ø–ª–æ–º",
        "cost": "üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è:**\n570 000 —Ç–µ–Ω–≥–µ –∑–∞ –æ–¥–∏–Ω —É—á–µ–±–Ω—ã–π –≥–æ–¥.",
        "duration": "‚è≥ **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è:**\n2 –≥–æ–¥–∞ –∏ 10 –º–µ—Å—è—Ü–µ–≤ (–æ—á–Ω–∞—è —Ñ–æ—Ä–º–∞)."
    }

    # markup = admission_buttons()
    # # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≤–æ–ø—Ä–æ—Å–æ–º
    # for button in markup.keyboard:
    #     if button[0].callback_data == call.data:
    #         markup.keyboard.remove(button)

    # # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    # response = responses.get(call.data, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
    # bot.edit_message_text(
    #     chat_id=call.message.chat.id,
    #     message_id=call.message.message_id,
    #     text=response,
    #     reply_markup=markup,
    #     parse_mode="Markdown"
    # )
    response = responses.get(call.data, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
    bot.send_message(call.message.chat.id, response, parse_mode="Markdown")


@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    bot.send_message(call.message.chat.id, call.data)


@bot.message_handler(content_types=['photo'])
def handle_images(message):
    user_id = message.chat.id
    file_id = message.photo[-1].file_id
    file_info = bot.get_file(file_id)
    file_path = file_info.file_path
    
    downloaded_file = bot.download_file(file_path)
    save_path = f'images/{file_id}.jpg'
    os.makedirs('images', exist_ok=True)
    with open(save_path, 'wb') as new_file:
        new_file.write(downloaded_file)
    
    save_image(user_id, save_path)
    bot.send_message(user_id, "üì∑ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")


def show_gallery(user_id):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT file_path FROM images WHERE user_id = ?", (user_id,))
    images = cursor.fetchall()
    conn.close()

    if not images:
        bot.send_message(user_id, "üñºÔ∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")
        return

    for image in images:
        with open(image[0], 'rb') as img_file:
            bot.send_photo(user_id, img_file)


bot.polling(none_stop=True)
